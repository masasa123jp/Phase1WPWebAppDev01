<?php
/**
 * AI advice endpoint.  Accepts a question about pet care and returns an
 * answer generated by the OpenAI Chat Completion API.  Reads the API
 * key from the pluginâ€™s general settings.  Requires authentication via
 * the default permission callback.  The response can be cached or
 * filtered by plugins.
 *
 * @package RoroCore\Api
 */

namespace RoroCore\Api;

use WP_REST_Request;
use WP_REST_Response;
use WP_Error;
use OpenAI;

class Ai_Advice_Endpoint extends Abstract_Endpoint {
    public const ROUTE = '/ai/advice';

    public function __construct() {
        add_action( 'rest_api_init', [ $this, 'register' ] );
    }

    public static function register() : void {
        register_rest_route( 'roro/v1', self::ROUTE, [
            [
                'methods'             => 'POST',
                'callback'            => [ self::class, 'handle' ],
                'permission_callback' => [ self::class, 'permission_callback' ],
                'args'                => [
                    'question' => [ 'type' => 'string', 'required' => true ],
                    'breed'    => [ 'type' => 'string', 'required' => false ],
                ],
            ],
        ] );
    }

    /**
     * Handle the AI advice request.  Returns an error if the OpenAI key
     * is not set.  Uses the gpt-4o model by default.
     *
     * @param WP_REST_Request $request Incoming request.
     *
     * @return WP_REST_Response|WP_Error
     */
    public static function handle( WP_REST_Request $request ) {
        $options = get_option( \RoroCore\Settings\General_Settings::OPTION_KEY );
        $api_key = $options['openai_key'] ?? '';
        if ( empty( $api_key ) ) {
            return new WP_Error( 'no_api_key', __( 'OpenAI API key not configured.', 'roro-core' ), [ 'status' => 500 ] );
        }
        $question = trim( $request->get_param( 'question' ) );
        if ( empty( $question ) ) {
            return new WP_Error( 'no_question', __( 'Question is required.', 'roro-core' ), [ 'status' => 400 ] );
        }
        try {
            $client = OpenAI::client( $api_key );
            $response = $client->chat()->create( [
                'model'    => 'gpt-4o',
                'messages' => [
                    [ 'role' => 'system', 'content' => 'You are a pet-care expert.' ],
                    [ 'role' => 'user',   'content' => $question ],
                ],
            ] );
            $answer = $response->choices[0]->message->content ?? '';
        } catch ( \Throwable $e ) {
            return new WP_Error( 'openai_error', $e->getMessage(), [ 'status' => 500 ] );
        }
        // Allow other plugins to modify the answer.
        $answer = apply_filters( 'roro_ai_advice_answer', $answer, $question, $request );
        return rest_ensure_response( [ 'answer' => $answer ] );
    }
}
